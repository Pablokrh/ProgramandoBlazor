@page "/EditarInmueble"
@page "/EditarInmueble/{Id:int}"


@inject IInmobiliariaServicios inmobiliariaServicio;
@inject IToastService toastService;
@inject NavigationManager navServicio;
@inject IImagenServicio imagenServicio;


<div class="row justify-content-center  mt-3">
    <p class="col-sm-12 col-md-8 col-xl-10 h4 mt-2">@Titulo</p>
</div>
<div class="row justify-content-center  mt-3">
    <div class="col-sm-12 col-md-8 col-xl-10">

        <EditForm Model="modelo" OnValidSubmit="GuardarCambios">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="input-group">
                <span class="input-group-text bg-light" id="basic-addon3">Nombre</span>
                <input type="text" class="form-control" @bind-value="modelo.Titulo">
            </div>
            <ValidationMessage For="@(()=>modelo.Titulo)" />

            <div class="input-group  mt-3">
                <span class="input-group-text bg-light">Descripcion</span>
                <textarea class="form-control" @bind="modelo.Detalles"></textarea>
            </div>
            <ValidationMessage For="@(()=>modelo.Detalles)" />

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">País</span>
                <input type="text" class="form-control" @bind-value="modelo.Pais">
                <span class="input-group-text bg-light" id="basic-addon3">Ciudad</span>
                <input type="text" class="form-control" @bind-value="modelo.Ciudad">
            </div>
            <div>
                <ValidationMessage For="@(()=>modelo.Pais)" />
                <ValidationMessage For="@(()=>modelo.Ciudad)" />
            </div>
       

            <div class="input-group mt-3">
                <span class="input-group-text bg-light" id="basic-addon3">Precio</span>
                <input type="number" class="form-control" @bind-value="modelo.Precio">
            </div>
            <ValidationMessage For="@(()=>modelo.Precio)" />
                @*
            <div class="input-group mt-3">
            <span class="input-group-text bg-light" id="basic-addon3">Precio Oferta</span>
            <input type="number" class="form-control" @bind-value="modelo.PrecioOferta">
            </div>
            <ValidationMessage For="@(()=>modelo.PrecioOferta)" />
                *@
         
                @*
            <div class="input-group mt-3">
            <span class="input-group-text bg-light" id="basic-addon3">Cantidad</span>
            <input type="number" class="form-control" @bind-value="modelo.Cantidad">
            </div>
            <ValidationMessage For="@(()=>modelo.Cantidad)" />

                *@
          

            <div class="mt-3">
                <button type="submit" class="btn btn-primary" style="width:130px">@boton</button>
                <a href="/productos" class="btn btn-secondary" style="width:130px">Volver</a>
            </div>
            <br />
            <div class="input-group mt-3">
               <InputFile type="file" class="form-control" accept="image/png, image/gif, image/jpeg" OnChange="OnFileChange"></InputFile>
                <button class="btn btn-success" @onclick="AgregarImagen" >Agregar imagen</button>
            </div>
        </EditForm>      
    </div>
</div>





<br />
@*CARRUSEL*@
<div class="conCarr col-6" style="background-color:grey ">

    <MudCarousel  @ref="_carousel" ItemsSource="@listaImagenes" @bind-SelectedIndex="selectedIndex" Style="height:375px" ShowArrows="@_arrows" ShowBullets="@_bullets" EnableSwipeGesture="@_enableSwipeGesture" AutoCycle="@_autocycle">
        <ItemTemplate>
            <div class="ImCarr">
                    <a class="aCarr" href="/#">
                    <MudImage Src="@context"></MudImage>
                    </a>
            </div>
        </ItemTemplate>
    </MudCarousel>

</div>
@*
<MudSwitch @bind-Checked="@_arrows" Color="Color.Primary">Show Arrows</MudSwitch>
<MudSwitch @bind-Checked="@_bullets" Color="Color.Primary">Show Bullets</MudSwitch>
<MudSwitch @bind-Checked="@_enableSwipeGesture" Color="Color.Primary">Enable Swap Gesture</MudSwitch>
<MudSwitch @bind-Checked="@_autocycle" Color="Color.Primary">Auto Cycle (Default: 5 secs)</MudSwitch>
<br />
<MudSelect @bind-Value="selectedIndex" Label="@($"Selected Item (index: {selectedIndex})")">   

    @{
        int index = 0;
        foreach (var item in listaImagenes)
        {
            <MudSelectItem Value="@index">@item</MudSelectItem>

            index++;
        }
    }
</MudSelect>
    *@

@code {
    private MudCarousel<string> _carousel;
    private bool _arrows = true;
    private bool _bullets = true;
    private bool _enableSwipeGesture = true;
    private bool _autocycle = true;

    private IList<string> _source = new List<string>() { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
    private int selectedIndex = 1;

    private async Task AddAsync()
    {
        _source.Add($"Item {_source.Count + 1}");
        await Task.Delay(1);
        _carousel.MoveTo(_source.Count - 1);
    }

    private async Task DeleteAsync(int index)
    {
        if (_source.Any())
        {
            _source.RemoveAt(index);
            await Task.Delay(1);
            _carousel.MoveTo(System.Math.Max(System.Math.Min(index, _source.Count - 1), 0));
        }

    }

}


@code {
    [Parameter]
    public int Id { get; set; }

    ImagenDTO imagenDTO;
    private string Titulo = "Nuevo producto";
    private string boton = "Crear";

    private List<ImagenDTO> listaImagenesDTO;
    private List<string> listaImagenes;

    private InmuebleDTO modelo = new InmuebleDTO();



    private async void AgregarImagen()
    {
        await imagenServicio.Crear(imagenDTO);
        await ObtenerImagenes();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Titulo = "Editar inmueble";
            boton = "Actualizar";

            var response = await inmobiliariaServicio.Obtener(Id);
            if (response.EsCorrecto == true)
            {
                modelo = response.Resultado!;
            }
            else
            {
                toastService.ShowWarning(response.Mensaje);
            }
        }
    }

    private async Task ObtenerImagenes()
    {
        listaImagenesDTO = new List<ImagenDTO>();
        listaImagenes = new List<string>();
        var response = await imagenServicio.ObtenerLista(Id);
        listaImagenesDTO =(List<ImagenDTO>) response.Resultado!;  

        foreach (var item in listaImagenesDTO)
        {
            listaImagenes.Add(item.ImagenData);
        }



    }

    protected override async Task OnInitializedAsync()
    {
        await ObtenerImagenes();
    }



    //Se ejecuta cada vez que se cambiamos la selección de algún archivo
    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        FileInfo fileInfo = new FileInfo(e.File.Name);
        if (fileInfo.Extension.ToLower().Contains(".jpg") || fileInfo.Extension.ToLower().Contains(".png"))
        {
            //Replace reemplaza el punto por un vacío. O sea, elimina el punto
            var format = $"image/{fileInfo.Extension.Replace(".", "")}";
            var resizeImage = await e.File.RequestImageFileAsync(format, 450, 300);
            var buffer = new byte[resizeImage.Size];
            //Dentro del buffer vamos a poner toda la imagen.
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            imagenDTO = new ImagenDTO()
            {
                IdInmueble = Id,
                ImagenData = imageData
            };


        }
    }

    private async Task GuardarCambios()
    {
        bool respuesta = true;
        string mensaje = string.Empty;

        if (Id != 0)
        {
            var response = await inmobiliariaServicio.Editar(modelo);
            if (response.EsCorrecto == true)
            {
                mensaje = "El producto fue modificado";
            }
            else
            {
                respuesta = false;
                mensaje = "No se pudo editar";
            }
        }

        else
        {
            var response = await inmobiliariaServicio.Crear(modelo);

            if (response.EsCorrecto == true)
            {
                mensaje = "El producto fue creado";
            }
            else
            {
                respuesta = false;
                mensaje = "No se pudo crear";
            }
        }

        if (respuesta == true)
        {
            toastService.ShowSuccess(mensaje);
            navServicio.NavigateTo("/productos");
        }
        else
        {
            toastService.ShowWarning(mensaje);
        }
    }
}