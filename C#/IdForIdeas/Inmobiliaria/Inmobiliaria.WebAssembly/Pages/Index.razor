@page "/"

@inject IInmobiliariaServicios inmobiliariaServicios;
@inject IImagenServicio imagenServicio;


<div>
    <div class="row justify-content-center mt-3 mb-4">
        <div class="col-sm-6 col-md-8 col-xl-9">
            <div class="input-group mb-3">
                <input type="text" class="form-control" placeholder="Buscar producto..." @bind-value="buscar">
                <button class="btn btn-outline-secondary" type="button" @onclick="(async () => await  ObtenerCatalogo())">
                    <i class="oi oi-magnifying-glass"></i>
                </button>
            </div>
        </div>
    </div>

     <div class="col-sm-10">

        <div class="row gx-4 row-cols-1 row-cols-md-3 row-cols-xl-4 justify-content-start">
            @foreach (var item in listaInmuebles)
            {
                <div class="tarjeta">
                    <div class="tarjeta-2">
                        <div>
                            <div class="text-center">
                                <a href="/detalle/@item.IdInmueble">
                                    <img class="card-img-top border-dark border-1 imagen-index" src="@PrintPrinc(item.IdInmueble).ImagenData" style="width:100%;height:250px">
                                </a>
                                <div>
                                    @item.TipoInmueble en @item.PublicadoPara.@item.Ciudad, @item.Pais.
                                </div>
                                Venezuela y Boedo
                                <hr>
                                <p class="fw-bolder">
                                   USD @item.Precio
                                </p>                             
                            
                            </div>
                        </div>                        
                    </div>


                </div>
            }        
        </div> 
     </div>
</div>     


@*
<div class="d-flex">
	<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@ToggleOpen">
		@(_isOpen? "Close" : "Open")
	</MudButton>
	<MudPopover Open="@_isOpen" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
		<div class="d-flex flex-column pa-1">
			<PopoverDynamicContentExample />
		</div>
	</MudPopover>
</div>
*@


@code {

    public bool _isOpen;

    public void ToggleOpen()
    {
        if (_isOpen)
            _isOpen = false;
        else
            _isOpen = true;
    }
}

@code{
    List<InmuebleDTO> listaInmuebles = new List<InmuebleDTO>();
    string buscar = "";
    ImagenDTO imgDevolver = new ImagenDTO();
    List<ImagenDTO> listadoImgs = new List<ImagenDTO>();


    private async Task ObtenerCatalogo()
    {
        var response = await inmobiliariaServicios.Catalogo(buscar);
        if (response.EsCorrecto == true)
        {
            listaInmuebles = (List<InmuebleDTO>)response.Resultado!;
        }
        else
        {
            listaInmuebles = new List<InmuebleDTO>();
        }
    }


    private ImagenDTO PrintPrinc(int id)
    {

        foreach (var item in listadoImgs)
        {
            if (item.IdInmueble == id && item.EsImagenPrincipal==true)
            {
                imgDevolver = item;
            }
        }

        // imgDevolver = listadoImgsPrincipales.ForEach(x => x.IdInmueble == id).fi;

        return imgDevolver;
    }

    private async Task LlenaListaImagenesPrincipales()
    {
        List<ImagenDTO> listaImagenesDTO = new List<ImagenDTO>();

        ResponseDTO<ImagenDTO> response = null;


        foreach (var item in listaInmuebles)
        {
            response = await imagenServicio.ObtenerImagenPrincipal(item.IdInmueble);
            listadoImgs.Add(response.Resultado);
        }

    }

    protected override async Task OnInitializedAsync()
    {
        await ObtenerCatalogo();
       await LlenaListaImagenesPrincipales();
    }
}

