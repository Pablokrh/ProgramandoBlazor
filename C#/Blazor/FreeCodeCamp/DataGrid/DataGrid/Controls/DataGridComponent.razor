@using DataGrid.Configuration;
@typeparam TItem

<table class="table">
    <thead>

        <tr>
            @if (ConfigurationDG == null || ConfigurationDG.Count <= 0)
            {
                //create the header with reflection
            }
            else
            {
                //Creare the header based on columns definitions

                @foreach (var item in ConfigurationDG)
                {
                   
                    @if (item.Alignment != Alignment.NotSet)
                    {
                        <th class="sortina" @onclick="@(()=>SortData(item))" align="@item.Alignment.ToString().ToLower()">
                            @item.Caption
                            <span style="float:right" class="@(SortClass(item)) "></span>
                        </th>
                        
                    }

                    else
                    {
                        <th class="sortina" @onclick="@(()=>SortData(item))">
                            @item.Caption
                            <span style="float:right" class="@(SortClass(item))"></span>

                        </th>
                    }


                }
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var item in DataItems.Skip(Paging.NumOfItemsToSkip(CurrentPageNumber))
        .Take(Paging.NumOfItemsToTake(DataItems.Count)))
        {
           <tr>
               @foreach (var column in ConfigurationDG)
                {

                    @if (!string.IsNullOrWhiteSpace(column.Format) && column.DataType != DataType.NotSet)
                    {
                        string value = string.Empty;
                        switch (column.DataType)
                        {
                            case DataType.Date:
                            case DataType.DateTime:
                                value = DateTime.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()).ToString(column.Format);
                            break;
                            case DataType.Boolean:
                                value = bool.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()).ToString();
                            break;
                            case DataType.Currency:
                            value = Math.Round(double.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()),2).ToString("c");
                            break;                      
                            default:
                            break;
                        }

                        @if (column.Alignment != Alignment.NotSet)
                        {
                            <td align="@column.Alignment.ToString().ToLower()">@value</td>
                        }

                        else
                        {
                            <td>@value</td>
                        }

                    }

                    else
                    {
                        @if (column.Alignment != Alignment.NotSet)
                        {
                            <td align="@column.Alignment.ToString().ToLower()">@typeof(TItem).GetProperty(column.DataField).GetValue(item)</td>
                        }

                        else
                        {
                            <td>@typeof(TItem).GetProperty(column.DataField).GetValue(item)</td>
                        }
                    }

                  
               }
           </tr>
        }

    </tbody>

</table>

<div>
    @if (Paging!=null && Paging.Enabled)
    {
        @if (Paging.CustomPager)
        {
            @CustomPager
        }
        else
        {
            <button class="btn btn-outline-primary" @onclick="GoToPrevPage">Previous</button>
            <span>Page @CurrentPageNumber of @Paging.MaxPageNumber(DataItems.Count)</span>
            <button class="btn btn-outline-primary" @onclick="GoToNextPage">Next</button>
        }
    }
</div>



@code {
    [Parameter]
    public List<TItem> DataItems { get; set; }
    [Parameter]
    public List<ConfigurationDG> ConfigurationDG { get; set; }

    [Parameter]
    public PaginConfig Paging { get; set; }

    [Parameter]
    public int CurrentPageNumber { get; set; } = 1;

    [Parameter]
    public RenderFragment CustomPager { get; set; }

    public void GoToPrevPage()
    {
        CurrentPageNumber = Paging.PrevPageNumber(CurrentPageNumber);
    }


    public void GoToNextPage()
    {
        CurrentPageNumber = Paging.NextPageNumber(CurrentPageNumber, DataItems.Count);

    }

    private string SortClass (ConfigurationDG column)
    {
        if (column.SortDirection != SortDirection.NotSet)
        {
            return $"sort {column.SortDirection.ToString().ToLower()}";
        }
        return "no-sort";

    }
    private void SortData (ConfigurationDG sortByColumn=null)
    {
        bool initial = (sortByColumn == null);

        if (sortByColumn == null)
        {
            sortByColumn = ConfigurationDG.FirstOrDefault(x => x.SortDirection != SortDirection.NotSet);
        if (sortByColumn==null) return;
        }
        foreach (var column in ConfigurationDG)
        {
            if (column.DataField != sortByColumn.DataField)
            {
                column.SortDirection = SortDirection.NotSet;
            }

            if (!initial)
            switch (sortByColumn.SortDirection)
            {
                case SortDirection.NotSet:
                    sortByColumn.SortDirection = SortDirection.Asc;
                    break;
                case SortDirection.Asc:
                    sortByColumn.SortDirection = SortDirection.Desc;
                    break;
                case SortDirection.Desc:
                    sortByColumn.SortDirection = SortDirection.Asc;
                    break;
                default:
                    sortByColumn.SortDirection = SortDirection.Asc;
                    break;
            }

            if (sortByColumn.SortDirection == SortDirection.Asc)
            {
                //le mete reflection
                DataItems.Sort((x, y) =>typeof(TItem).GetProperty(sortByColumn.DataField).GetValue(x).ToString().CompareTo(typeof(TItem).GetProperty(sortByColumn.DataField).GetValue(y).ToString()));
            }

            else
            {
                DataItems.Sort((x, y) => typeof(TItem).GetProperty(sortByColumn.DataField).GetValue(y).ToString().CompareTo(typeof(TItem).GetProperty(sortByColumn.DataField).GetValue(x).ToString()));

            }
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        SortData();
    }

}
